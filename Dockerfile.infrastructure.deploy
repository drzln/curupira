# syntax=docker/dockerfile:1
# Multi-stage build for Curupira MCP Server deployment
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++ git

# Set working directory
WORKDIR /app

# Copy package files for efficient caching
COPY package*.json ./
COPY tsconfig*.json ./
COPY shared/package*.json ./shared/
COPY mcp-server/package*.json ./mcp-server/

# Install dependencies using workspaces
RUN npm ci --workspaces

# Copy source code
COPY shared/ ./shared/
COPY mcp-server/ ./mcp-server/

# Build the application
RUN npm run build --workspace=@curupira/shared && \
    npm run build --workspace=curupira-mcp-server

# Production stage
FROM node:20-alpine AS production

# Add dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files and install production dependencies
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/shared/package*.json ./shared/
COPY --from=builder /app/mcp-server/package*.json ./mcp-server/

# Install production dependencies only
RUN npm ci --workspaces --omit=dev && \
    npm cache clean --force

# Copy built application with proper ownership
COPY --from=builder --chown=nodejs:nodejs /app/shared/dist ./shared/dist
COPY --from=builder --chown=nodejs:nodejs /app/mcp-server/dist ./mcp-server/dist

# Set user
USER nodejs

# Expose MCP server port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD node -e "fetch('http://localhost:8080/health').then(r => process.exit(r.ok ? 0 : 1)).catch(() => process.exit(1))"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the MCP server
CMD ["node", "mcp-server/dist/index.js"]