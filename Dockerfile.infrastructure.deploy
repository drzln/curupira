# Multi-stage build for Curupira MCP Server infrastructure deployment
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /build

# Copy workspace structure
COPY package*.json ./
COPY tsconfig.json ./

# Copy shared dependency
COPY shared ./shared

# Copy mcp-server
COPY mcp-server/package*.json ./mcp-server/
COPY mcp-server/tsconfig*.json ./mcp-server/
COPY mcp-server/src ./mcp-server/src

# Move to mcp-server directory
WORKDIR /build/mcp-server

# Install dependencies (this will resolve workspace dependencies)
RUN npm install

# Build the TypeScript code
RUN npm run build

# Runtime stage using minimal Node.js
FROM node:18-alpine

# Install minimal runtime dependencies
RUN apk add --no-cache \
    ca-certificates

# Create app directory and user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S curupira -u 1001

WORKDIR /usr/src/app

# Copy package files and install production dependencies
COPY --from=builder /build/mcp-server/package*.json ./
RUN npm install --omit=dev

# Copy built application from builder stage
COPY --from=builder --chown=curupira:nodejs /build/mcp-server/dist ./dist

# Set Node.js environment
ENV NODE_ENV=production

# Switch to non-root user
USER curupira

# Expose MCP WebSocket port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Start the MCP server using CLI with production settings
CMD ["node", "dist/cli.js", "start", "--env", "production", "--host", "0.0.0.0", "--port", "8080", "--log-level", "info"]