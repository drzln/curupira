# Curupira MCP Debugging Configuration
# Drop this file in your project root to configure Curupira for your React app
# https://github.com/pleme-io/nexus/tree/main/pkgs/tools/curupira

# Project information
project:
  name: "My React App"
  version: "1.0.0"
  description: "React application debugging with Curupira"
  framework: "react"  # react | next | gatsby | vite
  typescript: true

# MCP Server connection
server:
  url: "ws://localhost:8080/mcp"
  auth:
    enabled: false
    # Uncomment for authenticated debugging:
    # token: "your-jwt-token"
    # apiKey: "your-api-key"

# State management libraries to monitor
stateManagement:
  # React (always enabled for React apps)
  react:
    enabled: true
    devtools: true      # Hook into React DevTools
    profiling: true     # Performance profiling
    strictMode: false   # Enable React StrictMode debugging

  # XState (enable if you use XState)
  xstate:
    enabled: false
    inspector: true     # Connect to XState inspector
    devtools: true      # Browser devtools integration

  # Zustand (enable if you use Zustand)  
  zustand:
    enabled: false
    devtools: true      # Redux DevTools integration
    persist: true       # Monitor persistence layer

  # Apollo Client (enable if you use Apollo)
  apollo:
    enabled: false
    devtools: true      # Apollo DevTools integration
    cacheInspection: true  # Monitor cache operations

# Performance monitoring configuration
performance:
  enabled: true

  # Alert thresholds (when Curupira flags issues)
  thresholds:
    slowRender: 16        # milliseconds (anything slower than 60fps)
    memoryLeak: 1048576   # bytes (1MB memory growth)
    slowNetwork: 1000     # milliseconds (slow API calls)
    largeBundle: 512000   # bytes (500KB+ bundles)

  # Core Web Vitals monitoring
  coreWebVitals:
    enabled: true
    fcp: 1800    # First Contentful Paint target (ms)
    lcp: 2500    # Largest Contentful Paint target (ms)
    fid: 100     # First Input Delay target (ms) 
    cls: 0.1     # Cumulative Layout Shift target

  # What to profile
  profiling:
    renders: true         # React render performance
    memory: true          # Memory usage tracking
    network: true         # Network request monitoring
    customMetrics: true   # Custom performance metrics

# Debugging features
debugging:
  # Time-travel debugging
  timeTravel:
    enabled: true
    maxSnapshots: 100           # Keep last 100 state snapshots
    autoSnapshot: true          # Auto-capture state changes
    snapshotInterval: 5000      # Auto-snapshot every 5 seconds

  # Console log monitoring
  console:
    capture: true
    levels: ["log", "warn", "error", "debug"]  # Which log levels to capture
    maxEntries: 1000                          # Keep last 1000 log entries
    sanitize: true                            # Remove sensitive data

  # Network request monitoring
  network:
    capture: true
    captureHeaders: false      # Include request/response headers
    captureBody: false         # Include request/response bodies (be careful!)
    maxEntries: 500           # Keep last 500 requests
    # Only monitor specific endpoints:
    # filters: ["/api/", "/graphql", "fetch-calls"]

# Security and privacy settings  
security:
  # Automatic data sanitization
  sanitization:
    enabled: true
    piiDetection: true         # Detect and mask PII (emails, phones, etc.)
    maskingChar: "*"           # Character to use for masking
    # Add custom patterns to detect:
    # customPatterns: ["SECRET_", "API_KEY", "password"]

  # Which domains allow debugging
  allowedDomains:
    - "localhost"
    - "127.0.0.1" 
    - "*.local"
    - "*.dev"
    # Add your domains:
    # - "staging.myapp.com"
    # - "*.myapp.com"

  # Authentication settings
  auth:
    required: false                    # Require auth for debugging
    providers: ["local"]               # Available auth methods
    sessionTimeout: 86400000           # 24 hours in milliseconds

# Custom project-specific settings
custom:
  # Monitor specific components (optional)
  components:
    # Example: Monitor your key components
    Header:
      monitor: true
      performance: true
      stateTracking: true
    
    ShoppingCart:
      monitor: true
      performance: true
      stateTracking: true
    
    # ProductList:
    #   monitor: true
    #   performance: true
    #   stateTracking: false

  # Define critical pages to monitor
  pages:
    home:
      url: "/"
      name: "Home Page" 
      criticalPath: true              # Mark as critical user journey
      performanceTarget: 1500         # Target load time (ms)
    
    # Add your important pages:
    # checkout:
    #   url: "/checkout"
    #   name: "Checkout Flow"
    #   criticalPath: true
    #   performanceTarget: 2000
    
    # profile:
    #   url: "/profile"
    #   name: "User Profile"
    #   criticalPath: false
    #   performanceTarget: 3000

  # Define custom performance metrics
  customMetrics:
    # Example custom metrics:
    cartLoadTime:
      name: "Shopping Cart Load Time"
      description: "Time to load and render cart contents"
      threshold: 500                  # Alert if over 500ms
      unit: "ms"
    
    # searchResultsTime:
    #   name: "Search Results Time"  
    #   description: "Time to show search results"
    #   threshold: 1000
    #   unit: "ms"

# Development vs Production settings
# You can override settings per environment:
# 
# development:
#   debugging:
#     timeTravel:
#       enabled: true
#   security:
#     auth:
#       required: false
#
# production:  
#   debugging:
#     timeTravel:
#       enabled: false
#   security:
#     auth:
#       required: true
#     sanitization:
#       enabled: true